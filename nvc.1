.Dd $Mdocdate$
.Dt NVC 1
.Os
.Sh NAME
.Nm nvc
.Nd VHDL Compiler and Simulator
.\" ------------------------------------------------------------
.\" Synopsis
.\" ------------------------------------------------------------
.Sh SYNOPSIS
.Nm
.Fl a Ar
.Nm
.Fl e
.Fa unit
.Nm
.Fl r
.Fa unit
.Nm
.Fl c Ar
.\" ------------------------------------------------------------
.\" Description
.\" ------------------------------------------------------------
.Sh DESCRIPTION
.Nm
is an implementation of the VHDL language as defined by IEEE standard
1076-1993 and later revisions.
.Pp
Simulating a design typically involves three steps: analysing one or
more source files into the work library; elaborating a top-level design
unit; and finally running the elaborated design.
.Pp
.Nm
accepts three kinds of options: global options; commands; and options
specific to the command.  Global options must be placed before the
command and specific options must be placed after the command.
.\"
.Ss Commands
.Bl -tag -width Ds
.\" -a
.It Fl a Ar
Analyse one or more files into the work library.  Reads from standard
input if
.Ar file
is
.Ql - .
.\" -e
.It Fl e Ar unit
Elaborate a previously analysed top level design unit.
.\" -r
.It Fl r Ar unit
Execute a previously elaborated top level design unit.
.\" -c
.It Fl c Ar
Process code coverage data from
.Ar file
and generate coverage report.
.\" --dump
.It Fl -dump Ar unit
Print out a pseudo-VHDL representation of an analysed unit.  This is
usually only useful for debugging the compiler.
.\" --init
.It Fl -init
Initialise the working library directory.  This is not normally
necessary as the library will be automatically created when using other
commands such as
.Fl a .
.\" --install
.It Fl -install Ar package
Execute scripts to compile common verification frameworks and FPGA
vendor libraries.
.\" --list
.It Fl -list
Print all analysed and elaborated units in the work library.
.\"
.It Fl -make Ar unit ...
Generate a makefile for already analysed units.
.\"
.It Fl -syntax Ar
Check input files for syntax errors only.
.El
.\"
.Pp
Commands can be chained together.  For example to analyse a file
.Ar foo.vhd
and then elaborate and run a top-level entity
.Ar bar :
.Bd -literal -offset indent
$ nvc -a foo.vhd -e bar -r
.Ed
.Pp
Note that the
.Ar unit
argument for the
.Fl r
run command is taken from the earlier
.Fl e
elaborate command.
.\" ------------------------------------------------------------
.\" Global options
.\" ------------------------------------------------------------
.Ss Global options
.Bl -tag -width Ds
.\" --help
.It Fl h , -help
Display usage summary.
.\" -H
.It Fl H Ar size
Set the maximum size in bytes of the simulation heap.  This area of
memory is used for temporary allocations during process execution and
dynamic allocations by the VHDL
.Ql new
operator.  The
.Ar size
parameter takes an optional k, m, or g suffix to indicate kilobytes,
megabytes, and gigabytes respectively.  The default size is 16
megabytes.
.\" --ignore-time
.It Fl -ignore-time
Do not check the timestamps of source files when the corresponding
design unit is loaded from a library.
.\" -L
.It Fl L Ar path
Add
.Ar path
to the list of directories to search for libraries.  See the
.Sx LIBRARIES
section below for details.
.\" -M
.It Fl M Ar size
Set the maximum amount of memory in bytes used for the internal
representations of design units.  The default is 16 megabytes but this
may be insufficient when elaborating a large design.  The
.Ar size
parameter takes an optional k, m, or g suffix to indicate kilobytes,
megabytes, and gigabytes respectively.  For example
.Fl M64m
for 64 megabytes.
.\" --map
.It Fl -map Ns = Ns Ar name Ns : Ns Ar path
Specify exactly the location of the logical library
.Ar name .
Libraries mapped in this way will not use the normal search path.
.\" --messages
.It Fl -messages Ns = Ns Bo Cm full Ns | Ns Cm compact Bc
Select the format used for printing error and informational messages.
The default full message format is designed for readability whereas the
compact messages can be easily parsed by tools.
.\" --std
.It Fl -std Ns = Ns Ar rev
Select the VHDL standard revision to use.  VHDL standard revisions are
commonly referred to by the year they were published.  For example IEEE
1076-1993 is known as VHDL-93.  Specify either the full year such as
1993 or just the last two digits such as 93.  The accepted revisions are
1993, 2000, 2002, and 2008.  Note there is very limited supported for
any features beyond those in VHDL-2002.  VHDL-87 is not supported.
.\" --stderr
.It Fl -stderr Ns = Ns Ar level
Print error messages with the given severity or higher to
.Ql stderr
instead of
.Ql stdout .
The default is to print all messages to
.Ql stderr .
Valid levels are
.Cm note ,
.Cm warning ,
.Cm error ,
and
.Cm failure .
.\" --version
.It Fl v , -version
Display version and copyright information.
.\"
.It Fl -work Ns = Ns Ar name , Fl -work Ns = Ns Ar name Ns : Ns Ar path
Use
.Ar name
as the work library.  The second variant explicitly specifies the
location of the library.  See the
.\"
.Sx LIBRARIES
section below for details.
.El
.\" ------------------------------------------------------------
.\" Analysis options
.\" ------------------------------------------------------------
.Ss Analysis options
.Bl -tag -width Ds
.It Fl -bootstrap
Allow compilation of the
.Ql STANDARD
package.  Not useful in any other circumstances.
.\"
.It Fl -error-limit Ns = Ns Ar num
Stop after reporting
.Ar num
errors.  The default is 20.  Zero allows unlimited errors.
.\"
.It Fl -relaxed
Disable certain pedantic LRM conformance checks or rules that were
relaxed by later standards.  See the
.Sx RELAXED RULES
section below for details.
.El
.\" ------------------------------------------------------------
.\" Elaboration options
.\" ------------------------------------------------------------
.Ss Elaboration options
.Bl -tag -width Ds
.It Fl -cover
Enable code coverage reporting (see the
.Sx CODE COVERAGE
section below).
.\"
.It Fl -dump-llvm
Write generated LLVM IR to the work library directory before and after
optimisation.
.\"
.It Fl -dump-vcode
Print generated intermediate code.  This is only useful for debugging
the compiler.
.\"
.It Fl g Ar name Ns = Ns Ar value
Override top-level generic
.Ar name
with
.Ar value .
Integers, enumeration literals, and string literals are supported.  For
example
.Fl gI=5 ,
.Fl gINIT='1' ,
and
.Fl gSTR="hello" .
.\" --no-save
.It Fl -no-save
Do not save the elaborated design and other generated files to the
working library.  This is only really useful in combination with the
.Fl r
option.  For example:
.Bd -literal -offset indent
$ nvc -e --no-save tb -r
.Ed
.\"
.It Fl O0 , Fl 01 , Fl 02 , Fl O3
Set LLVM optimisation level.  Default is
.Fl O2 .
.\"
.It Fl V , Fl -verbose
Prints resource usage information after each elaboration step.
.El
.\" ------------------------------------------------------------
.\" Runtime options
.\" ------------------------------------------------------------
.Ss Runtime options
.Bl -tag -width Ds
.\" --dump-arrays
.It Fl -dump-arrays
Include memories and nested arrays in the waveform data.  This is
disabled by default as it can have significant performance, memory, and
disk space overhead.
.\" --exit-severity
.It Fl -exit-severity Ns = Ns Ar level
Terminate the simulation after an assertion failures of severity greater
than or equal to
.Ar level .
Valid levels are
.Cm note ,
.Cm warning ,
.Cm error ,
and
.Cm failure .
The default is
.Cm error .
.\" --format
.It Fl -format= Ns Ar fmt
Generate waveform data in format
.Ar fmt .
Currently supported formats are:
.Cm fst
and
.Cm vcd .
The FST format is native to
.Xr gtkwave 1 .  FST is preferred over VCD due its
smaller size and better performance.  VCD is a very widely used format
but has limited ability to represent VHDL types and the performance is
poor: select this only if you must use the output with a tool that does
not support FST.  The default format is FST if this option is not
provided.  Note that GtkWave 3.3.79 or later is required to view the FST
output.
.\" --gtkw
.It Fl g , Fl -gtkw Ns Bo = Ns Ar file Bc
Write a
.Xr gtkwave 1
save file containing every signal in the design hierarchy in declaration
order with separators for each scope.
This only makes sense in combination with the
.Fl -wave
option.
.\" --ieee-warnings
.It Fl -ieee-warnings= Ns Bo Cm on Ns | Ns Cm off Bc
Enable or disable warning messages from the standard IEEE packages.  The
default is warnings enabled.
.\" --include, --exclude
.It Fl -include= Ns Ar glob , Fl -exclude= Ns Ar glob
Signals that match
.Ar glob
are included in or excluded from the waveform dump.  See section
.Sx SELECTING SIGNALS
for details on how to select particular signals.  These options can be
given multiple times.
.\" --load
.It Fl -load= Ns Ar plugin
Loads a VHPI plugin from the shared library
.Ar plugin .
See section
.Sx VHPI
for details on the VHPI implementation.
.\" --profile
.It Fl -profile
Print various internal statistics about the simulation at the end of the
run.  This is mostly useful for tuning the runtime itself.
.\" --stats
.It Fl -stats
Print a summary of the time taken and memory used at the end of the run.
.\" --stop-delta
.It Fl -stop-delta Ns = Ns Ar N
Stop after
.Ar N
delta cycles.  This can be used to detect zero-time loops in your model.
The default is 10000 if not specified.  Setting this to zero disables
the delta cycle limit.
.\" --stop-time
.It Fl -stop-time Ns = Ns Ar T
Stop the simulation after the given time has elapsed.  Format of
.Ar T
is an integer followed by a time unit in lower case.  For example
.Cm 5ns
or
.Cm 20ms .
.\" --trace
.It Fl -trace
Trace simulation events.  This is usually only useful for debugging the
simulator.
.\" --vhpi-trace
.It Fl -vhpi-trace
Trace VHPI calls and events.  This can be useful for debugging VHPI
plugins.
.\" --wave
.It Fl w , Fl -wave Ns Bo = Ns Ar file Bc
Write waveform data to
.Ar file .
The file name is optional and if not specified will default to the name
of the top-level unit with the appropriate extension for the waveform
format.  The waveform format can be specified with the
.Fl -format
option.  By default all signals in the design will be dumped: see the
.Sx SELECTING SIGNALS
section below for how to control this.
.El
.\" ------------------------------------------------------------
.\" Coverage processing options
.\" ------------------------------------------------------------
.Ss Coverage processing options
.Bl -tag -width Ds
.It Fl -merge= Ar OUTPUT
Merge multiple
.Ar file
code coverage databases into
.Ar OUTPUT
code coverage database.
.It Fl -report= Ar DIR
Generate HTML code coverage report to
.Ar DIR
directory.
.El
.\" ------------------------------------------------------------
.\" Make options
.\" ------------------------------------------------------------
.Ss Make options
.Bl -tag -width Ds
.\" --deps-only
.It Fl -deps-only
Generate rules that only contain dependencies without actions.  These
can be useful for inclusion in a hand written makefile.
.\" --posix
.It Fl -posix
The generated makefile will work with any POSIX compliant make.
Otherwise the output may use extensions specific to GNU make.
.El
.\" ------------------------------------------------------------
.\" Install options
.\" ------------------------------------------------------------
.Ss Install options
.Bl -tag -width Ds
.\" --dest
.It Fl -dest Ar dir
Compile libraries into directory
.Ar dir
instead of the default
.Ql $HOME/.nvc/lib .
.\" --posix
.El
.\" ------------------------------------------------------------
.\" Libraries
.\" ------------------------------------------------------------
.Sh LIBRARIES
A library is a directory containing analysed design units and other
files generated by
.Nm .
The default library is called "work" and is placed in a directory also
called
.Em work .
Note that VHDL also has a concept of the "work library" where the
current library can be referred to by the alias
.Em work .
This confusing behaviour is an unfortunate hangover from the proprietary
tools the author used prior to writing
.Nm .
.Pp
The name and physical location of the work library is controlled by the
.Fl -work
global option.  In the simple case of
.Fl -work Ns = Ns Ar name
the library name is
.Ql name
and the physical location is a directory
.Pa name
relative to the current working directory.  The physical location can be
specified explicitly using
.Fl -work Ns = Ns Ar name Ns : Ns Ar path
where
.Ar path
is the directory name.
.Pp
The following examples should make this behaviour clear:
.Bd -literal -offset indent
$ nvc --work=mylib ...
.Ed
.Pp
The work library is named
.Ql mylib
and is mapped to a directory with the same name in the current working
directory.
.Bd -literal -offset indent
$ nvc --work=mylib:somedir ...
.Ed
.Pp
The work library is named
.Ql mylib
and is mapped to a directory
.Pa somedir
in the current working directory.
.Bd -literal -offset indent
$ nvc --work=mylib:/foo/bar ...
.Ed
.Pp
The work library is named
.Ql mylib
and is mapped to the absolute path
.Pa /foo/bar .
.Pp
Concurrent access to a single library by multiple processes is
completely safe and protected by a lock in the filesystem using
.Xr flock 2
that allows multiple concurrent readers but only a single writer.
.\" ------------------------------------------------------------
.\" CODE COVERAGE
.\" ------------------------------------------------------------
.Sh CODE COVERAGE
NVC supports collecting of code coverage. Following coverage types
are supported:
.Bl -bullet
.It
.Cm statement
- For each statement, NVC creates coverage bin. When statement is
executed, it is covered.
.It
.Cm branch
- For each point where code diverges (if/else, case,
when/else, with/select statements), NVC creates coverage bin. If
branch can be evaluated to both true and false, NVC creates two
coverage bins for such branch (one for each of true/false)
.It
.Cm toggle
- Each signal of type derived from std_logic
(including nested arrays) creates two coverage bins (to track
.Cm 0
->
.Cm 1
and
.Cm 1
->
.Cm 0
transitions).
.El
Collecting each coverage type can be enabled separately at elaboration time:
.Bd -literal -offset indent
$ nvc -e --cover=statement,branch,toggle <top>
.Ed
If no coverage type is specified as argument of
.Fl -cover
,all coverage types are collected. After
simulation is executed, NVC dumps coverage data into coverage database file
(*.covdb). To merge coverage databases from multiple simulations, and generate
hierarchy coverage report in HTML format, run:
.Bd -literal -offset indent
$nvc -c --merge=merged.covdb --report=<path_to_folder_for_html_report> \\
      first.covdb second.covdb third.covdb ...
.Ed
.Pp
NVC supports following additional options to control coverage collection:
.Bl -bullet
.It
.Cm count-from-undefined
- When set, NVC also counts toggles
.Cm U
->
.Cm 1
as
.Cm 0
->
.Cm 1
and toggles
.Cm U
->
.Cm 0
as
.Cm 1
->
.Cm 0
during toggle coverage collection.
.It
.Cm count-from-to-z
- When set, NVC also counts toggles from/to
.Cm Z
to either of
.Cm 0/1
as valid
.Cm 0
->
.Cm 1
or
.Cm 1
->
.Cm 0
transitions.
.It
.Cm ignore-mems
- When set, NVC does not collect toggle coverage on multidimensional arrays or
nested arrays (array of array).
.It
.Cm ignore-arrays-from-<size>
- When set, NVC does not collect toggle coverage for any array which is equal to
or larger than
.Cm <size>
.El
.Pp
All of the options above are passed comma separated to
.Fl -cover
elaboration option, e.g.:
.Bd -literal -offset indent
$ nvc -e --cover=all,ignore_mems,count-from-undefined <top>
.Ed
Coverage collection on parts of the code can be ignored via dedicated pragma, e.g.:
.Bd -literal -offset indent
case (sel) is
when "00" => ...
when "01" => ...
when "10" => ...
when "11" => ...
-- coverage off
when others => report "ERROR" severity failure;
-- coverage on
end case;
.Ed
.Pp
in the example above, statement coverage for
.Cm report
statement and branch coverage for
.Cm others
choice will not be collected.

Toggle coverage collection on specific signals can be also disabled, e.g.:
.Bd -literal -offset indent
-- coverage off
signal cnt : std_logic_vector(3 downto 0);
-- coverage on
.Ed
.Pp

.\" ------------------------------------------------------------
.\" Relaxed rules
.\" ------------------------------------------------------------
.Sh RELAXED RULES
The
.Fl -relaxed
analysis flag enables
.Dq relaxed rules
mode which downgrades the following errors to warnings:
.Bl -bullet
.It
Impure function called from pure function.
.It
File object declared in pure function.
.It
Default expression in object interface declaration is not globally
static.
.It
Shared variable is not of protected type in VHDL-2000 or later.
.El
.Pp
Additionally the following languages features from VHDL-2008 and later
are enabled in earlier standards:
.Bl -bullet
.It
Any visible explicitly declared operator always hides an implicit
operator regardless of the region in which it is declared.  This is
required to analyse code that uses the non-standard Synopsys
.Sy std_logic_arith
package.
.It
References to generics and array slices are allowed in locally static
expressions using the VHDL-2008 rules.
.It
Range bounds with
.Ql universal_integer
type are not required to be numeric literals or attributes.  This option
allows ranges such as
.Ql -1 to 1
in VHDL-1993 which otherwise must be written
.Ql integer'(-1) to 1 .
.El
.\" ------------------------------------------------------------
.\" Selecting signals
.\" ------------------------------------------------------------
.Sh SELECTING SIGNALS
Every signal object in an elaborated design has a unique hierarchical
path name.  In VHDL this can be accessed using the
.Ql PATH_NAME
attribute.
.Pp
A signal can be referred to using its full path name, for example
.Ql :top:sub:x ,
and
.Ql :top:other:x
are two different signals named
.Ql x
in the design.  The character
.Ql \&:
is a hierarchy separator.  The special character
.Ql *
is a wildcard that matches zero or more characters and may be used refer
to a group of signals.  For example
.Ql :top:*:x ,
.Ql *:x ,
and
.Ql :top:sub:* ,
all select both of the previous signals.
.\"
.Ss Restricting waveform dumps
Path names and globs can be used to exclude or explicitly include
signals in a waveform dump.  For simple cases this can be done using the
.Fl -include
and
.Fl -exclude
arguments.  For example
.Fl -exclude= Ns Qq Ar :top:sub:*
will exclude all matching signals from the waveform dump.  Multiple
inclusion and exclusion patterns can be provided.
.Pp
Specifying large numbers of patterns on the command line quickly becomes
cumbersome.  Instead inclusion and exclusion patterns can be read from a
text file.  If the top-level unit name is
.Ql top
then inclusion patterns should be placed in a file called
.Pa top.include
and exclusion patterns in a file called
.Pa top.exclude .
These files should be in the working directory where the
.Ql nvc -r
command is executed.  The format is one glob per line, with comments
preceded by a
.Ql #
character.
.Pp
When both inclusion and exclusion patterns are present, exclusions have
precedence over inclusions.  If no inclusion patterns are present then
all signals are implicitly included.
.\" ------------------------------------------------------------
.\" VHPI
.\" ------------------------------------------------------------
.Sh VHPI
.Nm
supports a subset of VHPI allowing access to signal values and
events at runtime.  The standard VHPI header file
.In vhpi_user.h
will be placed in the system include directory as part of the
installation process.  VHPI plugins should be compiled as shared
libraries; for example:
.Bd -literal -offset indent
$ cc -shared -fPIC my_plugin.c -o my_plugin.so
$ nvc -r --load my_plugin.so my_tb
.Ed
.Pp
The plugin should define a global
.Va vhpi_startup_routines
which is a NULL-terminated list of functions to call when the plugin is
loaded:
.Bd -literal -offset indent
void (*vhpi_startup_routines[])() = {
   startup_1,
   startup_2,
   NULL
};
.Ed
.Pp
Functions defined in VHPI plugin libraries may be called from VHDL using
the VHPIDIRECT protocol.  The VHDL function should be declared with the
.Ql FOREIGN
attribute giving the name of the function symbol exported from the
plugin.  For example:
.Bd -literal -offset indent
function my_func (x : integer; y : bit_vector; z : std_logic) return integer;
attribute foreign of my_func : function is "VHPIDIRECT my_func";
.Ed
.Pp
Where
.Ql my_func
is a global function defined in the plugin library as follows.
.Bd -literal -offset indent
int32_t my_func(int32_t x, const uint8_t *y, uint8_t z) { ... }
.Ed
.Pp
Foreign procedures may be defined similarly:
.Pp
.Bd -literal -offset indent
function my_proc (x : out integer; y : out bit_vector; z : std_logic);
attribute foreign of my_proc : function is "VHPIDIRECT my_proc";

void my_proc(int32_t *x, uint8_t *y, uint8_t z) { ... }
.Ed
.Pp
Note that scalar
.Ql out
parameters are passed by pointer.
.Pp
There is a simple mapping between VHDL and C types.
.Bl -tag -width "Unconstrained arrays"
.It Integers
The smallest C integer type that holds the full range of the VHDL type.
.It Reals
C
.Vt double
regardless of the range of the VHDL type.
.It Enumerated types
The smallest unsigned integer type that holds the full range of the VHDL
type.
.It Constrained arrays
Pointer to the element type.
.It Unconstrained arrays
Pointer to the element type.  Note that the length and bounds are not
available and must be passed explicitly as separate arguments.
.It Records
Not yet supported.
.El
.Pp
Here are several examples for common types:
.Bl -column "INTEGER range 1 to 5" -offset indent
.It Sy "VHDL type" Ta Sy "C type"
.It Li "INTEGER" Ta Vt int32_t
.It Li "INTEGER range 1 to 5" Ta Vt int8_t
.It Li REAL Ta Vt double
.It Li BOOLEAN Ta Vt uint8_t
.It Li "BIT_VECTOR(1 to 3)" Ta Vt "uint8_t *"
.It Li STD_LOGIC Ta uint8_t
.It Li STD_LOGIC_VECTOR Ta Vt "uint8_t *"
.El
.Pp
Foreign functions should not modify arrays passed as
.Ql in
arguments, although this is not enforced.  Additionally foreign
subprograms should not retain any pointers passed as arguments after the
subprogram returns.
.Sh ENVIRONMENT
.Bl -tag -width "NVC_COLORS"
.It Ev NVC_COLORS
Controls whether
.Nm
uses ANSI colour escape sequences to print diagnostic messages.  The
possible values are
.Cm never ,
.Cm always ,
and
.Cm auto
which enables colour if stdout is connected to a terminal.
The default is
.Cm auto .
.El
.\" .Sh FILES
.\" .Sh EXIT STATUS
.\" For sections 1, 6, and 8 only.
.\" .Sh EXAMPLES
.Sh SEE ALSO
.Xr gtkwave 1 ,
.Xr ghdl 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
Written by
.An Nick Gasson Aq nick@nickg.me.uk
.\" .Sh CAVEATS
.Sh BUGS
Report bugs to
.Mt nick@nickg.me.uk
or using the GitHub issue tracker at
.Lk https://github.com/nickg/nvc/issues .
Please include enough information to reproduce the problem, ideally with
a small VHDL test case.
